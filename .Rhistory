video.data <- video.data[sapply(video.data, ncol) == 15]
video.data <- video.data %>%
bind_rows()
# Chunk 4: bout_summary
# this routine summarises all the information about each bout - how many elements, players etc.
bout.summary <- lapply(
unique(video.data$bout.nr),# go through each unique bout and get information
function(x) {
# select only data of interest for bout
set.data <- filter(
video.data,
bout.nr == x, !Behavior %in% c("Non-Play", "Comment", "Start")
)
# arrange by time
set.data <- set.data[order(set.data$Time), ]
# remove empty bouts
if (nrow(set.data) == 0) {
return()
}
# create data frame with all the info about the bout
xx <- data.frame(
# set bout number
bout.nr = x,
# set video ID
video.id = unique(set.data$Media_file_path),
# names of players
players = paste(sort(unique(
unlist(strsplit(
set.data$Modifier_1[set.data$Behavior == "Players"],
split = ",", fixed = T
))
)), collapse = ","),
# name of play initiator
initiator = set.data$Subject[min(which(set.data$Behavior == "Play Element"))],
# number of players
nr.players = length(sort(unique(
unlist(strsplit(
set.data$Modifier_1[set.data$Behavior == "Players"],
split = ",", fixed = T
))
))),
# was the start observed?
start.observed = set.data$Modifier_2[1],
# start, end, and duration of bout
start.time = set.data$Time[2],
end.time = max(set.data$Time[set.data$Behavior == "End"]),
duration = set.data$Time[nrow(set.data)] - set.data$Time[2],
# how many elements were observed?
play.elements = sum(set.data$Behavior == "Play Element"),
# was end observed?
end = as.numeric("End" %in% set.data$Behavior),
# was there an intervention?
intervention = as.numeric("Intervention" %in% set.data$Behavior)
)
xx$end.observed <- NA
xx$end.outcome <- NA
# if end information is available?
if (xx$end == 1) {
xx$end.observed <-
set.data$Modifier_2[which(set.data$Behavior == "End")][length(set.data$Modifier_2[which(set.data$Behavior == "End")])]
}
if (xx$end == 1) {
xx$end.outcome <-
set.data$Modifier_1[which(set.data$Behavior == "End")][length(set.data$Modifier_1[which(set.data$Behavior == "End")])]
}
if (xx$start.observed == "No") {
xx$initiator <- NA
}
return(xx)
}
)
bout.summary <- do.call(rbind, bout.summary)
# Chunk 5: load_elements
# get elements and their possible replacements from the .csv file in the repository
element_table <-
read_csv("elements.csv", show_col_types = FALSE)
elements <- element_table$elements
# Chunk 6: remove_empty_bouts
# remove bouts that do not contain any of the elements specified above
remove <- sapply(unique(video.data$bout.nr), function(x) {
nrow(filter(
video.data,
bout.nr == x,
!Behavior %in% c(
"Non-Play",
"Comment",
"Start",
"End",
"Players",
"Intervention"
)
)) == 0
})
remove <- unique(video.data$bout.nr)[remove]
if (length(remove) > 0) {
video.data <- filter(video.data, video.data$bout.nr != remove)
}
# Chunk 7: bout_prepare
# go through each bout, remove useless information
bout.data <- lapply(unique(video.data$bout.nr), function(x) {
# select bout and sort by subject and time
set.data <-
filter(
video.data,
bout.nr == x,
!Behavior %in% c(
"Non-Play",
"Comment",
"Start",
"End",
"Players",
"Intervention"
)
) %>%
arrange(Subject, Time)
# vector with focals
focal <- set.data$Subject
# bout nr
bout.nr <- sub(".*/", "", unique(set.data$bout.nr))
# vector with time
Time <- set.data$Time
# put elements into list
bout.elements <- list()
for (i in 1:nrow(set.data)) {
yy <-
as.vector(unlist(strsplit(
unlist(set.data[i, ]),
split = ",", fixed = T
)))
yy <- intersect(yy, elements)
bout.elements[[i]] <- yy
}
# elements that co-occur in event are combined by % symbol
bout.elements <- sapply(bout.elements, paste, collapse = "%")
# empty cells (i.e. those not containing a recognised element) get NA
bout.elements[bout.elements == ""] <- NA
return(data.frame(focal, bout.nr, Time, bout.elements))
})
# combine all bouts into one frame
bout.data <- bind_rows(bout.data)
# create individual-level bout identifier
bout.data$bout.nr.focal <- bout.data %>%
unite(bout.nr, bout.nr, focal, sep = "_", remove = T) %>%
select(bout.nr)
bout.data$bout.nr.focal <-
as.vector(bout.data$bout.nr.focal$bout.nr)
# create list that has one vector of elements per individual-bout
elements.bout <-
lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(set.data$bout.elements)
})
# create list that has one vector of times per individual-bout
elements.time <-
lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(set.data$Time)
})
# create list of focal ID per individual-bout
bout.focal <- lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(unique(set.data$focal))
})
# create list of bout ID per individual-bout
bout.id <- lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(unique(set.data$bout.nr))
})
# name element-list and time-list using individual-bout id
names(elements.bout) <- unique(bout.data$bout.nr.focal)
names(elements.time) <- unique(bout.data$bout.nr.focal)
# Chunk 8: count_elements
# set threshould
threshold <- 20
# unlist elements
unlisted_elements_table <-
table(unlist_vector(elements.bout, method = "random"))
# detect elements below threshold
rare_elements <-
unlisted_elements_table[unlisted_elements_table <= threshold]
# show rare elements to replace
rare_elements_replace <- element_table %>%
filter(elements %in% names(rare_elements))
# go through rare elements and change them
for (i in seq_along(rare_elements_replace$elements)) {
# some elements do not have a natural replacement; instead, they had a '-' in the table
## ignore those
if (rare_elements_replace$potential_replacement[i] != "-") {
# use 'change_elements' function to change elements one by one
elements.bout <- change_elements(
elements.to.change = rare_elements_replace$elements[i],
new = rare_elements_replace$potential_replacement[i],
elem.bout = elements.bout
)
}
############ Repeat the same thing again in case some elements got missed
unlisted_elements_table <-
table(unlist_vector(elements.bout, method = "random"))
# detect elements below threshold
rare_elements <-
unlisted_elements_table[unlisted_elements_table <= threshold]
# show rare elements to replace
rare_elements_replace <- element_table %>%
filter(elements %in% names(rare_elements))
# go through rare elements and change them
for (i in seq_along(rare_elements_replace$elements)) {
if (rare_elements_replace$potential_replacement[i] != "-") {
elements.bout <- change_elements(
elements.to.change = rare_elements_replace$elements[i],
new = rare_elements_replace$potential_replacement[i],
elem.bout = elements.bout
)
}
# Chunk 9
kableExtra::kbl(t(elements.bout[[1]]), longtable = TRUE)
# Chunk 10: remove_serial
for (i in names(sort(unlisted_elements_table, decreasing = T))[1:7]) {
serial.removed <-
remove_serial(
elem.bout = elements.bout,
elem.time = elements.time,
to.remove = as.character(i),
move.first = TRUE
)
elements.bout <- serial.removed$elements
elements.time <- serial.removed$times
}
# Chunk 11
kableExtra::kbl(t(elements.bout[[1]]), longtable = TRUE)
# Chunk 12: zipf_plot_after
# How often does each element occur?
unlisted_elements_table <-
unlist_vector(elements.bout, method = "random") %>%
table()
# Data frame containing words and their frequency
word_count <- unlisted_elements_table %>%
data.frame(stringsAsFactors = FALSE) %>%
rename("element" = '.', "count" = Freq) %>%
arrange(desc(count)) %>%
mutate(element = as.character(element))
zipfs_plot <- zipf_plot(
element = word_count$element,
occurrance = word_count$count,
zipf = FALSE,
title = "Distribution of Element Frequencies"
)
zipfs_plot$zipf.plot
# Chunk 13: transitions
# create basic table of possible transitions
transitions <- transitions_frame(elem.bout = elements.bout,
all.possible = FALSE)
# how often does A lead to B
transitions$observed.sum <- elem_info(
antecedent = transitions$antecedent,
consequent = transitions$consequent,
elem.bout = elements.bout,
it = 1000,
measure = c("sum"),
ran.method = 'random'
)
# conditional probability of A leading to B
transitions$observed.probs <- round(
elem_info(
antecedent = transitions$antecedent,
consequent = transitions$consequent,
elem.bout = elements.bout,
it = 1000,
measure = c("prob"),
ran.method = 'random'
),
3
)
# Chunk 14: transitions_bow
# bigrams with observed probabilities of occurring within the same 'bag'
transitions_bow <-
bag_of_words(elem.bout = elements.bout,
elem.time = elements.time,
gap = c(0, 1))
# Chunk 15
# table showing the head of the transition frame
kableExtra::kbl(
transitions %>%
select(
antecedent,
consequent,
observed.sum,
observed.probs
) %>% head(10),
longtable = TRUE
)
# Chunk 16: transition_distributions
ggplot(transitions, aes(x = observed.probs)) +
geom_histogram(fill = "grey", bins = 50, color = 'black') +
theme_classic() +
xlab("Conditional Transition Probabilities")
# Chunk 17: boot_plot
# use 'boot_elements()' function
boot.probabilities <- boot_elements(
elem.bout = elements.bout,
antecedent = transitions$antecedent,
consequent = transitions$consequent,
measure = "prob",
trials = 100,
it = 10,
cores = 10,
ci.range = c(0.025, 0.975),
output = "summary",
ran.method = 'random'
)
######### compare randomized and observed
transitions$lower.ci <- boot.probabilities$lower.ci
transitions$upper.ci <- boot.probabilities$upper.ci
transitions$range.ci <- boot.probabilities$range.ci
transitions$sd <- boot.probabilities$sd.ci
transitions$cv <- boot.probabilities$cv.ci
ggplot(data = transitions, aes(x = observed.sum, y = range.ci)) +
geom_point(alpha = 0.5) +
theme_classic() +
ylab("Range Credible Interval") +
xlab("Count Element")
# Chunk 18: randomization_transitions
randomizations <- randomized_elem_info(
elem.bout = elements.bout,
antecedent = transitions$antecedent,
consequent = transitions$consequent,
observed = transitions$observed.probs,
it = 10,
cores = 10,
trials = 100,
type = "across",
output = "expected"
)
transitions$expected.sum <- randomizations$sum
transitions$expected.probs <- round(randomizations$prob, 3)
transitions$pvalue <- round(randomizations$pvalue, 3)
transitions$z <- round(randomizations$z, 3)
transitions$prob.increase <-
round(transitions$observed.probs / transitions$expected.probs, 3)
# Chunk 19
kableExtra::kbl(
transitions %>%
filter(observed.sum > 5) %>%
filter(pvalue <= 0.01) %>%
select(
antecedent,
consequent,
observed.probs,
expected.probs,
pvalue,
prob.increase
) %>%
filter(pvalue <= 0.01) %>%
arrange(desc(prob.increase)),
longtable = TRUE,
row.names = F,
caption = "Antecedent and consequent transition statistics for the dataset: listed are transitions that were significant at 0.01 and occurred at least 5 times in the dataset",
col.names = c('Antecedent', 'Consequent', 'Conditional Probability', 'Expected Conditional Probability', 'p-value', 'Increase in Probability')
)
# Chunk 20: prob_increase_distributions
ggplot(transitions, aes(x = prob.increase)) +
geom_histogram(fill = "grey", bins = 50, color = 'black') +
geom_vline(mapping = aes(xintercept = 1), linetype = 2) +
theme_classic() +
xlab("Ratio Observed/Expected Probabilities")
# Chunk 21: predictions
loo0 = prediction_loo(
elem.bout = elements.bout,
it = 10,
trials = 100,
cores = 10,
lvl = 0,
out = round(length(elements.bout)/25),
prediction = 'product',
ran.method = 'random'
)
loo1 = prediction_loo(
elem.bout = elements.bout,
it = 10,
trials = 100,
cores = 10,
lvl = 1,
out = round(length(elements.bout)/25),
prediction = 'product',
ran.method = 'random'
)
loo2 = prediction_loo(
elem.bout = elements.bout,
it = 1,
trials = 100,
cores = 10,
lvl = 2,
out = round(length(elements.bout)/25),
prediction = 'product',
ran.method = 'random'
)
loo3 = prediction_loo(
elem.bout = elements.bout,
it = 10,
trials = 100,
cores = 10,
lvl = 3,
out = round(length(elements.bout)/25),
prediction = 'product',
ran.method = 'random'
)
prediction.table = data.frame(
level = c(0, 1, 2, 3),
probabilities = c(
loo0$accuracy,
loo1$accuracy,
loo2$accuracy,
loo3$accuracy
)
kableExtra::kbl(prediction.table,
row.names = F,
caption = "Prediction accuracy of applied transition probabilities at different levels: level 0 is the prediction based on the simple occurrence probability of each element, level 1 has one antecedent element, level 2 has two antecedents, etc",
col.names = c('Level', 'Prediction Accuracy'),
digits = 3)
# Chunk 22: element_plot
element_plot(
element = "Feint",
antecedent = transitions$antecedent,
consequent = transitions$consequent,
count.antecedent = transitions$count.antecedent,
count.consequent = transitions$count.consequent,
observed.probs = transitions$observed.probs,
pvalue = transitions$pvalue,
cutoff = 5,
significance = 0.01
)$plot
# Chunk 23: similarity_plot
similar.cluster <- similiarity_clusters(
elem.bout = elements.bout,
measure = c("prob"),
k = NULL,
it = 100,
facet = FALSE,
level = "bigram",
ran.method = 'random'
)
# similar.cluster$plot.solutions
# similar.cluster$silhouette.check
# similar.cluster$plot.similarity
similar.cluster$dendrogram.plot
trans.net <- network_plot(
elem.bout = elements.bout,
edge.weight = "transition",
min.prob = 0,
min.count = 5,
significance = 0.01,
hide_unconnected = T,
link = "weighted",
clusters = T,
plot.bubbles = T,
title = "Transition Network Play Elements",
remove_loops = T,
cores = 10,
plot.layout = 'fr',
it = 100
)
trans.net$plot + ggtitle('')
trans.net <- network_plot(
elem.bout = elements.bout,
edge.weight = "transition",
min.prob = 0,
min.count = 5,
significance = 0.01,
hide_unconnected = T,
link = "weighted",
clusters = T,
plot.bubbles = T,
title = "Transition Network Play Elements",
remove_loops = T,
cores = 10,
plot.layout = 'fr',
it = 100
)
trans.net$plot + ggtitle('')
trans.net <- network_plot(
elem.bout = elements.bout,
edge.weight = "transition",
min.prob = 0,
min.count = 5,
significance = 0.01,
hide_unconnected = T,
link = "weighted",
clusters = T,
plot.bubbles = T,
title = "Transition Network Play Elements",
remove_loops = T,
cores = 10,
plot.layout = 'kk',
it = 10
)
trans.net$plot + ggtitle('')
trans.net <- network_plot(
elem.bout = elements.bout,
edge.weight = "transition",
min.prob = 0,
min.count = 5,
significance = 0.01,
hide_unconnected = T,
link = "unweighted",
clusters = T,
plot.bubbles = T,
title = "Transition Network Play Elements",
remove_loops = T,
cores = 10,
plot.layout = 'nicely',
it = 10
)
trans.net$plot + ggtitle('')
