table() %>%
t() %>%
data.frame() %>%
select(-Var1) %>%
rename('Number_of_clusters' = '.',
'Count' = 'Freq') %>%
kable(format = 'html',
row.names = NA,
align = "c",
booktabs = T) %>%
kable_styling(font_size = 9)
cluster_transposed$cluster.solution.options
cluster_transposed$goal.distribution
lapply(cluster_transposed$goal.distribution, function(x){x$count %>% colSums()}
)
lapply(cluster_transposed$goal.distribution, function(x){x$count %>% colSums()}) %>% unlist(F, F)
cluster_transposed$cluster.solution.number
cluster_transposed$cluster.solution.number %>% unlist() %>% sum
lapply(cluster_transposed$goal.distribution, function(x){x$count %>%
colSums()}) %>%
unlist(F, F) %>%
table() %>%
t() %>%
data.frame() %>%
select(-Var1) %>%
rename('Number_of_moprhs' = '.',
'Count' = 'Freq') %>%
kable(format = 'html',
row.names = NA,
align = "c",
booktabs = T) %>%
kable_styling(font_size = 9)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# Chunk 2: packages
# load libraries and functions
library(tidyverse)
setwd('~/GitHub/Mielke-Carvalho_Chimpanzee-Play/')
devtools::load_all(path = "R/")
set.seed(2804)
# Chunk 3: load_videos
#### set folder path where all tsv files are stored
file.paths <-
"coding_data/"
# find file paths
dfiles <- sort(list.files(path = file.paths, full.names = T))
# read every file into object
video.data <- lapply(dfiles, function(i) {
#skip first files because they contain meta-data when exporting from BORIS
xx <- read_tsv(i, skip = 20, show_col_types = FALSE)
# set column names
colnames(xx) <-
gsub(
colnames(xx),
pattern = " ",
replacement = "_",
fixed = T
)
# order by time
xx <- xx[order(xx$Time), ]
# clean path name
xx$Media_file_path <-
gsub(
xx$Media_file_path,
pattern = file.paths,
replacement = "",
fixed = T
)
xx$Media_file_path <-
gsub(
xx$Media_file_path,
pattern = ".mp4",
replacement = "",
fixed = T
)
xx$Media_file_path <-
gsub(
xx$Media_file_path,
pattern = ".dv",
replacement = "",
fixed = T
)
# remove rows that are not of interest here
xx <- xx[xx$Behavior != "Start", ]
xx <- xx[xx$Behavior != "Solo Play", ]
xx <- xx[xx$Behavior != "Comment", ]
# remove columns
xx <- xx %>%
select(-Total_length, -FPS, -Status)
# create bout number based on  'Behaviour == End'
xx <- xx %>%
mutate(play.bout = (Behavior == "End")) %>%
group_by(play.bout) %>%
mutate(bout.nr = cumsum(as.numeric(play.bout))) %>%
ungroup() %>%
mutate(bout.nr = cumsum(bout.nr)) %>%
select(-play.bout)
xx$bout.nr <- match(xx$bout.nr, unique(xx$bout.nr))
xx$bout.nr[xx$Behavior == "End"] <-
xx$bout.nr[xx$Behavior == "End"] - 1
#create new bout number
xx <-
xx %>% unite(bout.nr,
Media_file_path,
bout.nr,
sep = "_",
remove = FALSE
)
return(xx)
})
# exclude videos that did not have any data
video.data <- video.data[sapply(video.data, ncol) == 15]
video.data <- video.data %>%
bind_rows()
# Chunk 4: bout_summary
# this routine summarises all the information about each bout - how many elements, players etc.
bout.summary <- lapply(
unique(video.data$bout.nr),# go through each unique bout and get information
function(x) {
# select only data of interest for bout
set.data <- filter(
video.data,
bout.nr == x, !Behavior %in% c("Non-Play", "Comment", "Start")
)
# arrange by time
set.data <- set.data[order(set.data$Time), ]
# remove empty bouts
if (nrow(set.data) == 0) {
return()
}
# create data frame with all the info about the bout
xx <- data.frame(
# set bout number
bout.nr = x,
# set video ID
video.id = unique(set.data$Media_file_path),
# names of players
players = paste(sort(unique(
unlist(strsplit(
set.data$Modifier_1[set.data$Behavior == "Players"],
split = ",", fixed = T
))
)), collapse = ","),
# name of play initiator
initiator = set.data$Subject[min(which(set.data$Behavior == "Play Element"))],
# number of players
nr.players = length(sort(unique(
unlist(strsplit(
set.data$Modifier_1[set.data$Behavior == "Players"],
split = ",", fixed = T
))
))),
# was the start observed?
start.observed = set.data$Modifier_2[1],
# start, end, and duration of bout
start.time = set.data$Time[2],
end.time = max(set.data$Time[set.data$Behavior == "End"]),
duration = set.data$Time[nrow(set.data)] - set.data$Time[2],
# how many elements were observed?
play.elements = sum(set.data$Behavior == "Play Element"),
# was end observed?
end = as.numeric("End" %in% set.data$Behavior),
# was there an intervention?
intervention = as.numeric("Intervention" %in% set.data$Behavior)
)
xx$end.observed <- NA
xx$end.outcome <- NA
# if end information is available?
if (xx$end == 1) {
xx$end.observed <-
set.data$Modifier_2[which(set.data$Behavior == "End")][length(set.data$Modifier_2[which(set.data$Behavior == "End")])]
}
if (xx$end == 1) {
xx$end.outcome <-
set.data$Modifier_1[which(set.data$Behavior == "End")][length(set.data$Modifier_1[which(set.data$Behavior == "End")])]
}
if (xx$start.observed == "No") {
xx$initiator <- NA
}
return(xx)
}
)
bout.summary <- do.call(rbind, bout.summary)
# Chunk 5: load_elements
# get elements and their possible replacements from the .csv file in the repository
element_table <-
read_csv("elements.csv", show_col_types = FALSE)
elements <- element_table$elements
# Chunk 6: remove_empty_bouts
# remove bouts that do not contain any of the elements specified above
remove <- sapply(unique(video.data$bout.nr), function(x) {
nrow(filter(
video.data,
bout.nr == x,
!Behavior %in% c(
"Non-Play",
"Comment",
"Start",
"End",
"Players",
"Intervention"
)
)) == 0
})
remove <- unique(video.data$bout.nr)[remove]
if (length(remove) > 0) {
video.data <- filter(video.data, video.data$bout.nr != remove)
}
# Chunk 7: bout_prepare
# go through each bout, remove useless information
bout.data <- lapply(unique(video.data$bout.nr), function(x) {
# select bout and sort by subject and time
set.data <-
filter(
video.data,
bout.nr == x,
!Behavior %in% c(
"Non-Play",
"Comment",
"Start",
"End",
"Players",
"Intervention"
)
) %>%
arrange(Subject, Time)
# vector with focals
focal <- set.data$Subject
# bout nr
bout.nr <- sub(".*/", "", unique(set.data$bout.nr))
# vector with time
Time <- set.data$Time
# put elements into list
bout.elements <- list()
for (i in 1:nrow(set.data)) {
yy <-
as.vector(unlist(strsplit(
unlist(set.data[i, ]),
split = ",", fixed = T
)))
yy <- intersect(yy, elements)
bout.elements[[i]] <- yy
}
# elements that co-occur in event are combined by % symbol
bout.elements <- sapply(bout.elements, paste, collapse = "%")
# empty cells (i.e. those not containing a recognised element) get NA
bout.elements[bout.elements == ""] <- NA
return(data.frame(focal, bout.nr, Time, bout.elements))
})
# combine all bouts into one frame
bout.data <- bind_rows(bout.data)
# create individual-level bout identifier
bout.data$bout.nr.focal <- bout.data %>%
unite(bout.nr, bout.nr, focal, sep = "_", remove = T) %>%
select(bout.nr)
bout.data$bout.nr.focal <-
as.vector(bout.data$bout.nr.focal$bout.nr)
# create list that has one vector of elements per individual-bout
elements.bout <-
lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(set.data$bout.elements)
})
# create list that has one vector of times per individual-bout
elements.time <-
lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(set.data$Time)
})
# create list of focal ID per individual-bout
bout.focal <- lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(unique(set.data$focal))
})
# create list of bout ID per individual-bout
bout.id <- lapply(unique(bout.data$bout.nr.focal), function(x) {
set.data <- filter(bout.data, bout.nr.focal == x)
return(unique(set.data$bout.nr))
})
# name element-list and time-list using individual-bout id
names(elements.bout) <- unique(bout.data$bout.nr.focal)
names(elements.time) <- unique(bout.data$bout.nr.focal)
# Chunk 8: count_elements
# set threshould
threshold <- 20
# unlist elements
unlisted_elements_table <-
table(unlist_vector(elements.bout, method = "random"))
# detect elements below threshold
rare_elements <-
unlisted_elements_table[unlisted_elements_table <= threshold]
# show rare elements to replace
rare_elements_replace <- element_table %>%
filter(elements %in% names(rare_elements))
# go through rare elements and change them
for (i in seq_along(rare_elements_replace$elements)) {
# some elements do not have a natural replacement; instead, they had a '-' in the table
## ignore those
if (rare_elements_replace$potential_replacement[i] != "-") {
# use 'change_elements' function to change elements one by one
elements.bout <- change_elements(
elements.to.change = rare_elements_replace$elements[i],
new = rare_elements_replace$potential_replacement[i],
elem.bout = elements.bout
)
}
}
############ Repeat the same thing again in case some elements got missed
unlisted_elements_table <-
table(unlist_vector(elements.bout, method = "random"))
# detect elements below threshold
rare_elements <-
unlisted_elements_table[unlisted_elements_table <= threshold]
# show rare elements to replace
rare_elements_replace <- element_table %>%
filter(elements %in% names(rare_elements))
# go through rare elements and change them
for (i in seq_along(rare_elements_replace$elements)) {
if (rare_elements_replace$potential_replacement[i] != "-") {
elements.bout <- change_elements(
elements.to.change = rare_elements_replace$elements[i],
new = rare_elements_replace$potential_replacement[i],
elem.bout = elements.bout
)
}
}
# Chunk 9
kableExtra::kbl(t(elements.bout[[1]]), longtable = TRUE)
# Chunk 10: remove_serial
for (i in names(sort(unlisted_elements_table, decreasing = T))[1:7]) {
serial.removed <-
remove_serial(
elem.bout = elements.bout,
elem.time = elements.time,
to.remove = as.character(i),
move.first = TRUE
)
elements.bout <- serial.removed$elements
elements.time <- serial.removed$times
}
# Chunk 11
kableExtra::kbl(t(elements.bout[[1]]), longtable = TRUE)
length(elements.bout)
loo4 = prediction_loo(
elem.bout = elements.bout,
it = 1,
trials = 2,
cores = 10,
lvl = 2,
out = round(length(elements.bout)/100),
prediction = 'product',
ran.method = 'random'
)
source("~/GitHub/Mielke-Carvalho_Chimpanzee-Play/R/prediction_loo.R")
loo4 = prediction_loo(
elem.bout = elements.bout,
it = 1,
trials = 2,
cores = 10,
lvl = 2,
out = round(length(elements.bout)/100),
prediction = 'product',
ran.method = 'random'
)
source("~/GitHub/Mielke-Carvalho_Chimpanzee-Play/R/prediction_loo.R")
loo4 = prediction_loo(
elem.bout = elements.bout,
it = 1,
trials = 2,
cores = 10,
lvl = 2,
out = round(length(elements.bout)/100),
prediction = 'product',
ran.method = 'random'
)
seq_along(loo4)
sapply(loo4, function(x){x$accuracy})
sapply(loo4, function(x){x$naivebayes.accuracy})
similar.cluster$clusters
setwd('~/GitHub/Mielke-Carvalho_Chimpanzee-Play/')
devtools::document()
rm(list = c("prediction_loo"))
# load libraries and functions
library(tidyverse)
library(igraph)
setwd('~/GitHub/Mielke-Carvalho_Chimpanzee-Play/')
devtools::load_all(path = "R/")
similar.cluster <- similiarity_clusters(
elem.bout = elements.bout,
measure = c("prob"),
k = NULL,
it = 1,
facet = FALSE,
level = "bigram",
ran.method = 'random',
n_epochs = 7000,
trials = 1
)
source("~/GitHub/Mielke-Carvalho_Chimpanzee-Play/R/similarity_clusters.R")
similar.cluster <- similiarity_clusters(
elem.bout = elements.bout,
measure = c("prob"),
k = NULL,
it = 1,
facet = FALSE,
level = "bigram",
ran.method = 'random',
n_epochs = 7000,
trials = 1
)
library(tidyverse)
similar.cluster <- similiarity_clusters(
elem.bout = elements.bout,
measure = c("prob"),
k = NULL,
it = 1,
facet = FALSE,
level = "bigram",
ran.method = 'random',
n_epochs = 7000,
trials = 1
)
devtools::load_all(path = "~/GitHub/Mielke-Carvalho_Chimpanzee-Play/R/")
rm(list = c("similiarity_clusters"))
similar.cluster <- similiarity_clusters(
elem.bout = elements.bout,
measure = c("prob"),
k = NULL,
it = 1,
facet = FALSE,
level = "bigram",
ran.method = 'random',
n_epochs = 7000,
trials = 1
)
similar.cluster$plot.similarity$data$cluster
similar.cluster$silhouette.check
similar.cluster$solutions
max(similar.cluster$solutions, na.rm = T)
trans.net <- network_plot(
elem.bout = elements.bout,
edge.weight = "transition",
min.prob = 0,
min.count = 5,
significance = 0.01,
hide_unconnected = T,
link = "weighted",
clusters = T,
plot.bubbles = F,
title = "Transition Network Play Elements",
remove_loops = T,
cores = 10,
plot.layout = 'fr',
it = 1
)
round(trans.net$within_cluster_transitions[1], 3)*100
round(trans.net$within_cluster_transitions[2], 3)*100
round(trans.net$within_cluster_transitions[3], 1)
kableExtra::kbl(
similar.cluster$clusters %>%
left_join(trans.net$plot$data, by = c('element' = 'name')) %>%
select(element,
dendrogram.cluster,
community) %>%
arrange(desc(community, dendrogram.cluster)),
longtable = TRUE,
row.names = F,
caption = "Cluster assignment for play elements"
)
kableExtra::kbl(
similar.cluster$clusters %>%
left_join(trans.net$plot$data, by = c('element' = 'name')) %>%
select(element,
dendrogram.cluster,
community) %>%
arrange(desc(community), desc(dendrogram.cluster)),
longtable = TRUE,
row.names = F,
caption = "Cluster assignment for play elements"
)
kableExtra::kbl(
similar.cluster$clusters %>%
left_join(trans.net$plot$data, by = c('element' = 'name')) %>%
select(element,
dendrogram.cluster,
community) %>%
arrange(community, dendrogram.cluster),
longtable = TRUE,
row.names = F,
caption = "Cluster assignment for play elements"
)
unlink("~/GitHub/Chimp_Play/Mielke & Carvalho Supplementary 1_cache", recursive = TRUE)
tinytex::install_tinytex()
source("~/GitHub/Mielke-Carvalho_Chimpanzee-Play/R/similarity_clusters.R")
similar.cluster <- similiarity_clusters(
elem.bout = elements.bout,
measure = c("prob"),
k = NULL,
it = 1000,
facet = FALSE,
level = "bigram",
ran.method = 'random',
n_epochs = 7000,
trials = 20
)
# similar.cluster$plot.solutions
# similar.cluster$silhouette.check
# similar.cluster$plot.similarity
similar.cluster$dendrogram.plot
max(as.numeric(unique(similar.cluster$plot.similarity$data$cluster)))
similar.cluster$solutions
similar.cluster$plot.similarity
